import { useCallback, useState } from 'react';
import { useDispatch } from 'react-redux';
import { setError, setSuccess } from '../../redux/slices/notificationsSlice';
import axios from 'axios';
import { jwtDecode } from 'jwt-decode';
import { setUser } from '../../redux/slices/userSlice';
import Logo from '../../others/Logo';
import { useNavigate } from 'react-router-dom';
import FileDrop from './FileDrop';

const Registration = ({ onSwitch }) => {
  const [form, setForm] = useState({
    username: '',
    name: '',
    password: '',
    logo: '',
  });
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [fieldError, setFieldError] = useState([]);
  const [formError, setFormError] = useState({});

  const checkFields = (name, value) => {
    const fieldNames = {
      username: '–õ–æ–≥–∏–Ω',
      name: '–ò–º—è',
      password: '–ü–∞—Ä–æ–ª—å',
      logo: '–õ–æ–≥–æ',
    };

    let errors = [];
    let formErrors = { ...formError };

    const fieldName = fieldNames[name] || name;

    if (!value.trim()) {
      setFieldError((prev) => prev.filter((err) => !err.includes(fieldName)));

      formErrors[name] = false;
      setFormError((prev) => ({ ...prev, ...formErrors }));
      return;
    }

    if (value.length >= 20) {
      errors.push(`–ü–æ–ª–µ "${fieldName}" –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤`);
      formErrors[name] = true;
    }
    if (fieldName !== '–ò–º—è' && fieldName !== '–õ–æ–≥–æ') {
      if (/\s/.test(value)) {
        errors.push(`–ü–æ–ª–µ "${fieldName}" –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤`);
        formErrors[name] = true;
      } else if (!/^[A-Za-z0-9]+$/.test(value)) {
        errors.push(
          `–í –ø–æ–ª–µ "${fieldName}" –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã`
        );
        formErrors[name] = true;
      } else {
        formErrors[name] = false;
      }
    }

    setFormError((prev) => ({ ...prev, ...formErrors }));
    setFieldError((prev) => {
      const newError = prev.filter((err) => !err.includes(fieldName));
      return [...newError, ...errors];
    });
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    checkFields(name, value);
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleFileChange = useCallback((file) => {
    setForm((prevForm) => ({ ...prevForm, logo: file }));
  }, []);

  const onSubmitHandler = async (event) => {
    event.preventDefault();

    if (!form.username.trim() || !form.password.trim()) {
      dispatch(setError('–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'));
      return;
    }

    if (fieldError.length !== 0) {
      dispatch(setError('–í —Ñ–æ—Ä–º–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –∏—Å–ø—Ä–∞–≤—å –∏—Ö!'));
      return;
    }

    const formData = new FormData();
    formData.append('username', form.username);
    formData.append('name', form.name);
    formData.append('password', form.password);
    if (form.logo) {
      formData.append('logo', form.logo);
    }

    try {
      const res = await axios.post(
        'http://localhost:5000/auth/registration/',
        formData
      );
      const { token } = res.data;
      localStorage.setItem('token', token);
      try {
        const decode = jwtDecode(token);
        console.log(decode);
        dispatch(
          setUser({
            username: decode.username,
            userId: decode._id,
            logo: decode.logo,
          })
        );
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞', e);
        dispatch(setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞'));
        return;
      }
      navigate('/profile');
      dispatch(setSuccess('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!'));
    } catch (error) {
      dispatch(
        setError(
          error.response?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
        )
      );
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    }
  };

  return (
    <>
      <Logo />
      {/* <p className="auth-form__text">
        –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –ø–∞—Ü–∞–Ω—Å–∫–∏—Ö —Ü–∏—Ç–∞—Ç –î–∂–µ–π—Å–æ–Ω–∞ –°—Ç–µ—Ç—Ö—ç–º–∞!
        –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –º—É–¥—Ä—ã–µ –º—ã—Å–ª–∏ –∏–ª–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Ö–æ—á–µ—à—å
        –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Äî –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ—é –ª–µ–ø—Ç—É –≤
        –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å—É—Ä–æ–≤—ã—Ö –∞—Ñ–æ—Ä–∏–∑–º–æ–≤. üì¢ <br />
        <br />
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –¥–æ–±–∞–≤–ª—è–π —Ü–∏—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Å—Ç–∞–≤—è—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –¥–∞–∂–µ
        —Å–∞–º–æ–≥–æ –±—ã–≤–∞–ª–æ–≥–æ –º—É–∂–∏–∫–∞. üî• –û—Ü–µ–Ω–∏–≤–∞–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–π –ª—É—á—à–∏–µ –∏–∑—Ä–µ—á–µ–Ω–∏—è. üí¨
        –î–µ–ª–∏—Å—å –º—É–¥—Ä–æ—Å—Ç—å—é —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏. –í–æ–π–¥–∏ –≤ –∫—Ä—É–≥ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö ‚Äî
        —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üöÄ
      </p> */}
      <form className="auth-form " onSubmit={onSubmitHandler}>
        {fieldError.map((error, index) => {
          return (
            <ul className="auth-form__error" key={index}>
              <li className="auth-form__error-list">{error}</li>
            </ul>
          );
        })}
        <div className="auth-form__wrapper form-wrapper__username">
          <input
            name="username"
            placeholder="–ü—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –ø–æ–≥–æ–Ω—è–ª–æ"
            type="text"
            onChange={handleChange}
            className={`${formError?.username ? 'auth-form__error-field' : ''}`}
            value={form.username}
            maxLength={20}
          />
        </div>
        <div className="auth-form__wrapper form-wrapper__name">
          <input
            name="name"
            placeholder="–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, —Å—ã–Ω–æ–∫?"
            className={`${formError?.name ? 'auth-form__error-field' : ''}`}
            type="text"
            onChange={handleChange}
            value={form.name}
          />
        </div>
        <div className="auth-form__wrapper form-wrapper__password">
          {' '}
          <input
            name="password"
            placeholder="–ó–∞—à–∏—Ñ—Ä—É–π—Å—è –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç"
            type="password"
            onChange={handleChange}
            value={form.password}
            className={`${formError?.password ? 'auth-form__error-field' : ''}`}
          />
        </div>

        <FileDrop username={form.username} onFileSelect={handleFileChange} />
        {/* <label className="logo-file-drop">
          <p>
            <img src="src/img/icon/drop-file.png" alt="logo" />
            –ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ—ë –ª–æ–≥–æ <br /> <br />
            –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å
          </p>
          <input
            name="logo"
            type="file"
            className="logo-file-drop-input"
            onChange={(e) => {
              handleFileChange(e);
              handleChange(e);
            }}
          />
        </label> */}

        {/* <input
          name="logo"
          type="file"
          className={`${fieldError ? 'auth-form__error' : 'logo-file-drop'}`}
          onChange={(e) => {
            handleFileChange(e);
            handleChange(e);
          }}
        /> */}

        <button className="popup-btn_active" type="submit">
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        </button>
        <span className="auth-form__bottom-link" onClick={onSwitch}>
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        </span>
      </form>
    </>
  );
};

export default Registration;
